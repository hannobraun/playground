# The compiler provides intrinsic functions for bitwise operations.

# leading zeros
0x00000000 leading_zeros 32 = assert
0x00000001 leading_zeros 31 = assert
0x40000000 leading_zeros 1 = assert
0x80000000 leading_zeros 0 = assert

# trailing zeros
0x00000001 trailing_zeros 0 = assert
0x00000002 trailing_zeros 1 = assert
0x80000000 trailing_zeros 31 = assert
0x00000000 trailing_zeros 32 = assert

# count ones
0x00000000 count_ones 0 = assert
0x00000002 count_ones 1 = assert
0x00000006 count_ones 2 = assert
0xfffffffe count_ones 31 = assert
0xffffffff count_ones 32 = assert

# and
0x00ff00ff
0x00ffff00
    and
0x00ff0000
    = assert

# or
0x00ff00ff
0x00ffff00
    or
0x00ffffff
    = assert

# exclusive or
0x00ff00ff
0x00ffff00
    xor
0x0000ffff
    = assert

# shift left
0x0f070301 1 shift_left 0x1e0e0602 = assert
0x0f070301 2 shift_left 0x3c1c0c04 = assert
0x0f070301 4 shift_left 0xf0703010 = assert
0x0f070301 8 shift_left 0x07030100 = assert

# shift right
0xf0703010 1 shift_right 0xf8381808 = assert
0xf0703010 2 shift_right 0xfc1c0c04 = assert
0xf0703010 4 shift_right 0xff070301 = assert
0xf0703010 8 shift_right 0xfff07030 = assert

# rotate left
0xf0703010 1 rotate_left 0xe0e06021 = assert
0xf0703010 2 rotate_left 0xc1c0c043 = assert
0xf0703010 4 rotate_left 0x0703010f = assert
0xf0703010 8 rotate_left 0x703010f0 = assert

# rotate right
0x0f070301 1 rotate_right 0x87838180 = assert
0x0f070301 2 rotate_right 0x43c1c0c0 = assert
0x0f070301 4 rotate_right 0x10f07030 = assert
0x0f070301 8 rotate_right 0x010f0703 = assert
