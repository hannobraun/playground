# addition
2 -1 + 1 = assert
2 0 + 2 = assert
2 1 + 3 = assert
2147483647 1 + -2147483648 = assert

# subtraction
2 1 - 1 = assert
2 0 - 2 = assert
2 -1 - 3 = assert
-2147483648 1 - 2147483647 = assert

# multiplication
2 0 * 0 = assert
2 1 * 2 = assert
2 -1 * -2 = assert
1073741824 2 * -2147483648 = assert

# division
8 2 / 4 = assert
9 2 / 4 = assert
8 -2 / -4 = assert
# There are two important cases that are not tested here:
#
# - Division by zero.
# - `-2147483648 -1 /`, which results in an overflow.
#
# Both result in a trap. Per the WebAssembly specification, the result of the
# numeric operation is undefined in this case:
# https://webassembly.github.io/spec/core/exec/numerics.html#op-idiv-s
#
# And if a result is undefined, the respective instruction is specified to trap:
# https://webassembly.github.io/spec/core/exec/instructions.html
#
# While the language doesn't provide any options to handle these kinds of
# exceptions, this behavior is desirable. But the same lack of exception
# handling capability means there's no way to test it here.
